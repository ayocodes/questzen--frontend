import type { NextPage } from "next";
import Head from "next/head";
import Router from "next/router";
import { useState } from "react";
import styled from "styled-components";

interface ITitle {
  selected: boolean;
}

const SBody = styled.div`
  display: flex;
  justify-content: center;
`;

const SMain = styled.div`
  width: 100%;
  display: flex;
  flex-direction: column;
  max-width: 65rem;
  margin: 1rem;
  margin-top: 1.5rem;
`;

const SPageHeader = styled.p`
  font-weight: 500;
  font-size: 1.5rem;
  line-height: 1.5rem;
`;

const SCreateQuiz = styled.div`
  width: 15rem;
  height: 3.5rem;
  cursor: pointer;
  padding: 1.25rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 2.5rem 0 4rem 0;

  background: linear-gradient(#fff, #fff),
    linear-gradient(141.29deg, #fca3a3 -6.98%, #dfa3fc 111.45%);
  background-origin: padding-box, border-box;
  background-repeat: no-repeat;
  border: 2px solid transparent;
  border-radius: 1em;
`;

const Sp = styled.p<ITitle>`
  font-weight: 600;
  font-size: 1.8rem;
  line-height: 2rem;
  margin-bottom: 2rem;
  margin-right: 2.5rem;
  cursor: pointer;

  ${({ selected }) =>
    selected &&
    `background: linear-gradient(to right, #ff8787 -6.98%, #c157f6 111.45%);
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;`};

  :hover {
    background: linear-gradient(to right, #ff8787 -6.98%, #c157f6 111.45%);
    -webkit-text-fill-color: transparent;
    background-clip: text;
    -webkit-background-clip: text;
  }
`;

const STitle = styled.p<ITitle>`
  font-weight: 600;
  font-size: 1.8rem;
  line-height: 2rem;
  margin-bottom: 2rem;
  cursor: pointer;

  ${({ selected }) =>
    !selected &&
    `  background: linear-gradient(to right, #ff8787 -6.98%, #c157f6 111.45%);
  -webkit-text-fill-color: transparent;
  -webkit-background-clip: text;`};

  :hover {
    background: linear-gradient(to right, #ff8787 -6.98%, #c157f6 111.45%);
    -webkit-text-fill-color: transparent;
    background-clip: text;
    -webkit-background-clip: text;
  }
`;

const SQuizCard = styled.div`
  display: flex;
  width: 13rem;
  height: 10.5rem;
  cursor: pointer;
  padding: 20px 10px;
  background-color: #3e9fff;
  flex-direction: column;
  justify-content: end;
  border-radius: 1rem;
  transition: 250ms box-shadow;

  :hover {
    box-shadow: 5px 10px 10px rgba(62, 159, 255, 0.25);
  }
`;

const SQuizCardBox = styled.div`
  display: grid;
  padding-bottom: 1rem;
  gap: 5rem;
  grid-template-columns: repeat(auto-fit, minmax(12rem, 12rem));
`;

const SQuizDetails = styled.p`
  font-weight: 600;
  font-size: 1rem;
  line-height: 1rem;
  color: #fff;
  padding-bottom: 10px;
`;

const SQuizDuration = styled.p`
  font-size: 0.8rem;
  line-height: 0.8rem;
  color: #fff;
`;

const STitleBox = styled.div`
  display: flex;
`;

const Home: NextPage = () => {
  const [happening, setHappening] = useState(true);

  const date = Date.now();

  const data = [
    {
      title: "who wants to be a millionaire",
      Curator: "Kelvin Praise",
      duration: "45min",
      expireDate: 1667824831937,
    },
    {
      title: "who wants to be a billionaire",
      Curator: "drokeyi Praise",
      duration: "45min",
      expireDate: 1667824831937,
    },
    {
      title: "who wants to be a zillionaire",
      Curator: "Kevin Harris",
      duration: "1 day",
      expireDate: 1667824831937,
    },
    {
      title: "who wants to be a coder",
      Curator: "Kelvin Praise",
      duration: "45min",
      expireDate: 1667824831937,
    },
    {
      title: "who wants to be a poor man?",
      Curator: "no one wants",
      duration: "45min",
      expireDate: 1667824831937,
    },
    {
      title: "who wants to be a student",
      Curator: "Kelvin Praise",
      duration: "45min",
      expireDate: 1667824831937,
    },
    {
      title: "who wants to have a laptop",
      Curator: "Kelvin Praise",
      duration: "45min",
      expireDate: 1669824831937,
    },
  ];

  const happeningNow: {
    title: string;
    Curator: string;
    duration: string;
    expireDate: number;
  }[] = [];

  const expired: {
    title: string;
    Curator: string;
    duration: string;
    expireDate: number;
  }[] = [];

  data.forEach((item) => {
    if (item.expireDate >= date!) {
      happeningNow.push(item);
    } else {
      expired.push(item);
    }
  });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <SBody>
        <SMain>
          <SPageHeader>QuestZen</SPageHeader>
          <SCreateQuiz onClick={() => Router.push("./set-questions")}>
            <p>Create a Quiz</p>
            <img src="addLight.svg" alt="" />
          </SCreateQuiz>
          <STitleBox>
            <Sp onClick={() => setHappening(true)} selected={happening}>
              Live Quiz
            </Sp>
            <STitle onClick={() => setHappening(false)} selected={happening}>
              Expired Quiz
            </STitle>
          </STitleBox>

          <SQuizCardBox>
            {happening ? (
              <>
                {happeningNow.map((item, i) => {
                  return (
                    <SQuizCard>
                      <SQuizDetails>{item.title}</SQuizDetails>
                      <SQuizDetails style={{ fontWeight: "400" }}>
                        Curator: {item.Curator}
                      </SQuizDetails>
                      <SQuizDuration>Duration: {item.duration}</SQuizDuration>
                    </SQuizCard>
                  );
                })}
              </>
            ) : (
              <>
                {expired.map((item, i) => {
                  return (
                    <SQuizCard>
                      <SQuizDetails>{item.title}</SQuizDetails>
                      <SQuizDetails style={{ fontWeight: "400" }}>
                        Curator: {item.Curator}
                      </SQuizDetails>
                      <SQuizDuration>Duration: {item.duration}</SQuizDuration>
                    </SQuizCard>
                  );
                })}
              </>
            )}
          </SQuizCardBox>
        </SMain>
      </SBody>
    </>
  );
};

export default Home;
